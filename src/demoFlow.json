{
    "id": "b2cae670-dffc-4f00-9585-c4b693a0f5d7",
    "title": "September 2022 Demo",
    "description": "This fragment is part of an introductory statistics course.\nConcepts covered: average/mean value, median, mode.",
    "nodes": [
        {
            "runtimeData": {
                "challengeSetup": [],
                "challengeContent": [
                    {
                        "type": "markdown",
                        "content": "# The mean value and the median\nIn math, the word mean refers to what‚Äôs informally called the average. The mean is the number you get by dividing the sum of a set of values by the number of values in the set.  \nIn contrast, the median is the middle number in a set of ordered values.  "
                    }
                ]
            },
            "type": "lessonTextNode",
            "title": "Introduction to the mean and the median",
            "description": "",
            "difficulty": 1,
            "data": {
                "text": "# The mean value and the median\nIn math, the word mean refers to what‚Äôs informally called the average. The mean is the number you get by dividing the sum of a set of values by the number of values in the set.  \nIn contrast, the median is the middle number in a set of ordered values.  "
            },
            "reactFlow": {
                "id": "ac0a2afc-66b5-41c4-97a2-f2cb76abaaaa",
                "type": "lessonTextNode",
                "position": {
                    "x": -29.99999999999997,
                    "y": 165
                },
                "data": {
                    "label": "Introduction to the mean and the median"
                },
                "width": 278,
                "height": 40,
                "selected": false,
                "dragging": false
            }
        },
        {
            "runtimeData": {
                "challengeSetup": [],
                "challengeContent": [
                    {
                        "type": "markdown",
                        "content": "## Coding the average  \nNow that you know what the mean value is, let's calculate it using C#.  \nFill the template provided below to return the mean of the `values` collection.",
                        "priority": 0
                    },
                    {
                        "type": "csharp",
                        "content": "double average(IEnumerable<int> values)\n{\n    return\n}",
                        "priority": 1
                    }
                ]
            },
            "type": "codingQuestionNode",
            "title": "Coding the average",
            "description": "",
            "difficulty": 1,
            "data": {
                "question": "## Coding the average  \nNow that you know what the mean value is, let's calculate it using C#.  \nFill the template provided below to return the mean of the `values` collection.",
                "codeTemplate": "double average(IEnumerable<int> values)\n{\n    return\n}",
                "language": "csharp"
            },
            "reactFlow": {
                "id": "533c51ff-02ce-4dbe-9fa6-2ad787d1546e",
                "type": "codingQuestionNode",
                "position": {
                    "x": 300,
                    "y": 165
                },
                "data": {
                    "label": "Coding the average"
                },
                "width": 143,
                "height": 40,
                "selected": false,
                "dragging": false
            }
        },
        {
            "type": "lessonTextNode",
            "title": "Mean value review",
            "description": "",
            "difficulty": 1,
            "data": {
                "text": "Let's better understand what the average value is with an example.  \nSuppose we want to calculate the mean of the set $\\{10, 13, 17\\}$  \nBy applying the definition, the average value is the sum of the elements in the set divided by the number of elements in the set.\n$$\\frac{10 + 13 + 17}{3} = 13.33$$"
            },
            "reactFlow": {
                "id": "7306037d-8ada-4baa-ab9b-5c699a196238",
                "type": "lessonTextNode",
                "position": {
                    "x": 195,
                    "y": 285
                },
                "data": {
                    "label": "Mean value review"
                },
                "width": 137,
                "height": 40,
                "selected": false,
                "dragging": false
            },
            "runtimeData": {
                "challengeSetup": [],
                "challengeContent": [
                    {
                        "type": "markdown",
                        "content": "Let's better understand what the average value is with an example.  \nSuppose we want to calculate the mean of the set $\\{10, 13, 17\\}$  \nBy applying the definition, the average value is the sum of the elements in the set divided by the number of elements in the set.\n$$\\frac{10 + 13 + 17}{3} = 13.33$$"
                    }
                ]
            }
        },
        {
            "type": "lessonTextNode",
            "title": "Well done",
            "description": "",
            "difficulty": 1,
            "data": {
                "text": "well done! üí™üèª"
            },
            "reactFlow": {
                "id": "31b5431d-9fde-4d35-831a-8c20ef6274b8",
                "type": "lessonTextNode",
                "position": {
                    "x": 570,
                    "y": 165
                },
                "data": {
                    "label": "Well done"
                },
                "width": 84,
                "height": 40,
                "selected": false,
                "dragging": false
            },
            "runtimeData": {
                "challengeSetup": [],
                "challengeContent": [
                    {
                        "type": "markdown",
                        "content": "well done! üí™üèª"
                    }
                ]
            }
        },
        {
            "type": "codingQuestionNode",
            "title": "Coding the median",
            "description": "",
            "difficulty": 1,
            "data": {
                "question": "## Coding the median  \nIt's time to calculate the median.  \nFill the template provided below to return the median of the `values` collection.",
                "codeTemplate": "double median(IEnumerable<int> values)\n{\n    return\n}",
                "language": "csharp"
            },
            "reactFlow": {
                "id": "1be1a179-d620-4cc0-b5ae-f8f98a8a27c8",
                "type": "codingQuestionNode",
                "position": {
                    "x": 840,
                    "y": 165
                },
                "data": {
                    "label": "Coding the median"
                },
                "width": 140,
                "height": 40,
                "selected": false,
                "dragging": false
            },
            "runtimeData": {
                "challengeSetup": [],
                "challengeContent": [
                    {
                        "type": "markdown",
                        "content": "## Coding the median  \nIt's time to calculate the median.  \nFill the template provided below to return the median of the `values` collection.",
                        "priority": 0
                    },
                    {
                        "type": "csharp",
                        "content": "double median(IEnumerable<int> values)\n{\n    return\n}",
                        "priority": 1
                    }
                ]
            }
        },
        {
            "type": "lessonTextNode",
            "title": "Well done!",
            "description": "",
            "difficulty": 1,
            "data": {
                "text": "Well done, that's the end of the lesson!"
            },
            "reactFlow": {
                "id": "0e3e524d-dd35-460f-b321-a50a27a176fd",
                "type": "lessonTextNode",
                "position": {
                    "x": 1275,
                    "y": 165
                },
                "data": {
                    "label": "Well done!"
                },
                "width": 88,
                "height": 40,
                "selected": false,
                "dragging": false
            },
            "runtimeData": {
                "challengeSetup": [],
                "challengeContent": [
                    {
                        "type": "markdown",
                        "content": "Well done, that's the end of the lesson!"
                    }
                ]
            }
        },
        {
            "type": "closeEndedQuestionNode",
            "title": "Average question",
            "description": "",
            "difficulty": 1,
            "data": {
                "question": "Now it's your turn. Calculate the mean of the following set.  \n  \n$\\{32, 92, 35, 89, 17\\}$\n\n<details>\n  <summary>Hint</summary>\n  \n  $$\\frac{32 + 92 + 35 + 89 + 17}{5} = ?$$\n</details>",
                "correctAnswers": [
                    "53"
                ]
            },
            "reactFlow": {
                "id": "85556cc3-697e-40b8-ba9f-f937de6ce5c7",
                "type": "closeEndedQuestionNode",
                "position": {
                    "x": 375,
                    "y": 285
                },
                "data": {
                    "label": "Average question"
                },
                "width": 130,
                "height": 40,
                "selected": false,
                "dragging": false
            },
            "runtimeData": {
                "challengeSetup": [],
                "challengeContent": [
                    {
                        "type": "markdown",
                        "content": "Now it's your turn. Calculate the mean of the following set.  \n  \n$\\{32, 92, 35, 89, 17\\}$\n\n<details>\n  <summary>Hint</summary>\n  \n  $$\\frac{32 + 92 + 35 + 89 + 17}{5} = ?$$\n</details>",
                        "priority": 0
                    },
                    {
                        "type": "csharp",
                        "content": "",
                        "priority": 1
                    }
                ]
            }
        },
        {
            "type": "lessonTextNode",
            "title": "Difference between median and average",
            "description": "",
            "difficulty": 1,
            "data": {
                "text": "| Mean | Median |\n|:---:|:---:|\n| Mean is the ratio of the sum of all the values<br>of the data set to the total number of values. | Median represents the middlemost value of a data set. |\n| The data set items are not arranged in ascending<br>order before finding the mean. | The data set items are arranged in ascending order<br>before finding the median. |\n| The formula to calculate the mean is the same if there<br>are an even or odd number of items in the data set. | The formula is different for an even and an odd number<br>of items in the data set. |\n| Mean takes every value in the given data set <br>for the calculation. | Every value in the given data set is not taken<br>while calculating the median. |\n| Mean is not suitable if there are drastically high and<br>low observations in the data set. This data may not<br>clearly represent the data taken into consideration.<br>Mean is best suited for the normal distribution data. | Median is suitable if there are very high and low<br>values since it arranges all the values in ascending order.<br>The median value is more appropriate for skewed distribution. |\n| Mean formula: <br> given the set $\\{x_1, x_2, ..., x_n\\}$ <br> $$\\frac{\\sum\\limits_{i=1}^n x_i}{n}$$ | Median formula: <br> given the set $\\{x_1, x_2, ..., x_n\\}$ <br><br> if n is odd: &nbsp; \\($p = \\frac{n+1}{2}$\\) $$ x_{p+1} $$ if n is even: &nbsp; \\($p = \\frac{n}{2}$\\) $$ \\frac{x_p + x_{p + 1}}{2} $$ |"
            },
            "reactFlow": {
                "id": "c9473f2d-fa81-4808-84e9-e1fb9a7eba24",
                "type": "lessonTextNode",
                "position": {
                    "x": 645,
                    "y": 45
                },
                "data": {
                    "label": "Difference between median and average"
                },
                "width": 272,
                "height": 40,
                "selected": false,
                "dragging": false
            },
            "runtimeData": {
                "challengeSetup": [],
                "challengeContent": [
                    {
                        "type": "markdown",
                        "content": "| Mean | Median |\n|:---:|:---:|\n| Mean is the ratio of the sum of all the values<br>of the data set to the total number of values. | Median represents the middlemost value of a data set. |\n| The data set items are not arranged in ascending<br>order before finding the mean. | The data set items are arranged in ascending order<br>before finding the median. |\n| The formula to calculate the mean is the same if there<br>are an even or odd number of items in the data set. | The formula is different for an even and an odd number<br>of items in the data set. |\n| Mean takes every value in the given data set <br>for the calculation. | Every value in the given data set is not taken<br>while calculating the median. |\n| Mean is not suitable if there are drastically high and<br>low observations in the data set. This data may not<br>clearly represent the data taken into consideration.<br>Mean is best suited for the normal distribution data. | Median is suitable if there are very high and low<br>values since it arranges all the values in ascending order.<br>The median value is more appropriate for skewed distribution. |\n| Mean formula: <br> given the set $\\{x_1, x_2, ..., x_n\\}$ <br> $$\\frac{\\sum\\limits_{i=1}^n x_i}{n}$$ | Median formula: <br> given the set $\\{x_1, x_2, ..., x_n\\}$ <br><br> if n is odd: &nbsp; \\($p = \\frac{n+1}{2}$\\) $$ x_{p+1} $$ if n is even: &nbsp; \\($p = \\frac{n}{2}$\\) $$ \\frac{x_p + x_{p + 1}}{2} $$ |"
                    }
                ]
            }
        },
        {
            "type": "lessonTextNode",
            "title": "Median review",
            "description": "",
            "difficulty": 1,
            "data": {
                "text": "Let's better understand what the median value is with an example.  \nIt is true that the median is the middle value of a set of numbers, but the set doesn't always have a 'middle' value.\nSuppose we want to calculate the median of the set $\\{13, 10, 8, 5, 13, 17\\}$  \nWe should first order the set in ascending order, obtaining $\\{5, 8, 10, 13, 13, 17\\}$  \nThe set has an even number of values, so the median is the average of the two middle values, that is, the average of the third and fourth values.  \n$$\\frac{10 + 13}{2} = 11.5$$\n\nThe definition of the median then is:\n- If the set has an odd number of values, the median is the middle value.\n- If the set has an even number of values, the median is the average of the two middle values."
            },
            "reactFlow": {
                "id": "f6d047d1-83bf-448b-b8df-cb5cd1811adc",
                "type": "lessonTextNode",
                "position": {
                    "x": 780,
                    "y": 285
                },
                "data": {
                    "label": "Median review"
                },
                "width": 112,
                "height": 40,
                "selected": false,
                "dragging": false
            },
            "runtimeData": {
                "challengeSetup": [],
                "challengeContent": [
                    {
                        "type": "markdown",
                        "content": "Let's better understand what the median value is with an example.  \nIt is true that the median is the middle value of a set of numbers, but the set doesn't always have a 'middle' value.\nSuppose we want to calculate the median of the set $\\{13, 10, 8, 5, 13, 17\\}$  \nWe should first order the set in ascending order, obtaining $\\{5, 8, 10, 13, 13, 17\\}$  \nThe set has an even number of values, so the median is the average of the two middle values, that is, the average of the third and fourth values.  \n$$\\frac{10 + 13}{2} = 11.5$$\n\nThe definition of the median then is:\n- If the set has an odd number of values, the median is the middle value.\n- If the set has an even number of values, the median is the average of the two middle values."
                    }
                ]
            }
        },
        {
            "type": "closeEndedQuestionNode",
            "title": "Median question",
            "description": "",
            "difficulty": 1,
            "data": {
                "question": "Now it's your turn. Calculate the mean of the following set.  \n  \n$\\{32, 92, 35, 89, 17\\}$\n\n<details>\n  <summary>Hint</summary>\n\n  First order the set in ascending order, $\\{17, 32, 35, 89, 92 \\}$  \n  The set has an odd number of values, so the median is the middle value, that is, the third value.\n</details>",
                "correctAnswers": [
                    "35"
                ]
            },
            "reactFlow": {
                "id": "9d1026d2-dd46-46f7-94c3-851f840ea008",
                "type": "closeEndedQuestionNode",
                "position": {
                    "x": 945.0000000000001,
                    "y": 285
                },
                "data": {
                    "label": "Median question"
                },
                "width": 126,
                "height": 40,
                "selected": false,
                "dragging": false
            },
            "runtimeData": {
                "challengeSetup": [],
                "challengeContent": [
                    {
                        "type": "markdown",
                        "content": "Now it's your turn. Calculate the mean of the following set.  \n  \n$\\{32, 92, 35, 89, 17\\}$\n\n<details>\n  <summary>Hint</summary>\n\n  First order the set in ascending order, $\\{17, 32, 35, 89, 92 \\}$  \n  The set has an odd number of values, so the median is the middle value, that is, the third value.\n</details>",
                        "priority": 0
                    },
                    {
                        "type": "csharp",
                        "content": "",
                        "priority": 1
                    }
                ]
            }
        },
        {
            "type": "closeEndedQuestionNode",
            "title": "Mean & Median question",
            "description": "",
            "difficulty": 1,
            "data": {
                "question": "Calculate the mean minus the median of the set $\\{3, 5, 7, 9, 11\\}$",
                "correctAnswers": [
                    "0"
                ]
            },
            "reactFlow": {
                "id": "ddb6f2eb-5d57-44c5-8d74-f09c97935f3d",
                "type": "closeEndedQuestionNode",
                "position": {
                    "x": 975,
                    "y": 45
                },
                "data": {
                    "label": "Mean & Median question"
                },
                "width": 180,
                "height": 40,
                "selected": false,
                "dragging": false
            },
            "runtimeData": {
                "challengeSetup": [],
                "challengeContent": [
                    {
                        "type": "markdown",
                        "content": "Calculate the mean minus the median of the set $\\{3, 5, 7, 9, 11\\}$",
                        "priority": 0
                    },
                    {
                        "type": "csharp",
                        "content": "",
                        "priority": 1
                    }
                ]
            }
        }
    ],
    "edges": [
        {
            "type": "unconditionalEdge",
            "title": "",
            "data": {},
            "code": "\nasync Task<(bool, string)> validate(PolyglotValidationContext context) {\n    return (true, \"Unconditional edge\");\n}",
            "reactFlow": {
                "id": "7db1f85e-479a-4846-aab6-6d4178971b17",
                "source": "ac0a2afc-66b5-41c4-97a2-f2cb76abaaaa",
                "target": "533c51ff-02ce-4dbe-9fa6-2ad787d1546e",
                "type": "unconditionalEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            }
        },
        {
            "type": "customValidationEdge",
            "title": "wrong",
            "data": {
                "code": "async Task<(bool, string)> validate(PolyglotValidationContext context) {\n    var imports = new[] { \"System.Linq\", \"System\", \"System.Collections.Generic\" };\n    var assemblies = new[] { typeof(Enumerable).Assembly, typeof(Random).Assembly, typeof(System.Collections.IEnumerable).Assembly };\n    var x = await CSharpScript.RunAsync<(bool, string)>($\"{context.JourneyContext.SubmittedCode}\" + @\"\n        var _random = new Random();\n        var _param = Enumerable.Range(_random.Next(3, 6), _random.Next(5, 8))\n                            .Select(i => _random.Next(100)).ToList();\n        double _expected = _param.Average();\n        double _result = average(_param);\n        return (_expected != _result, $\"\"{(_expected != _result ? \"\"average function is not correct\"\": \"\"average function correct\"\")}\"\");\n    \", Microsoft.CodeAnalysis.Scripting.ScriptOptions.Default.AddImports(imports).AddReferences(assemblies));\n    return x.ReturnValue;\n}"
            },
            "code": "async Task<(bool, string)> validate(PolyglotValidationContext context) {\n    var imports = new[] { \"System.Linq\", \"System\", \"System.Collections.Generic\" };\n    var assemblies = new[] { typeof(Enumerable).Assembly, typeof(Random).Assembly, typeof(System.Collections.IEnumerable).Assembly };\n    var x = await CSharpScript.RunAsync<(bool, string)>($\"{context.JourneyContext.SubmittedCode}\" + @\"\n        var _random = new Random();\n        var _param = Enumerable.Range(_random.Next(3, 6), _random.Next(5, 8))\n                            .Select(i => _random.Next(100)).ToList();\n        double _expected = _param.Average();\n        double _result = average(_param);\n        return (_expected != _result, $\"\"{(_expected != _result ? \"\"average function is not correct\"\": \"\"average function correct\"\")}\"\");\n    \", Microsoft.CodeAnalysis.Scripting.ScriptOptions.Default.AddImports(imports).AddReferences(assemblies));\n    return x.ReturnValue;\n}",
            "reactFlow": {
                "id": "e9c682b1-5d97-472a-bd5e-bb8ddb2087ff",
                "source": "533c51ff-02ce-4dbe-9fa6-2ad787d1546e",
                "target": "7306037d-8ada-4baa-ab9b-5c699a196238",
                "type": "customValidationEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            }
        },
        {
            "type": "customValidationEdge",
            "title": "coded the average",
            "data": {
                "code": "async Task<(bool, string)> validate(PolyglotValidationContext context) {\n    var imports = new[] { \"System.Linq\", \"System\", \"System.Collections.Generic\" };\n    var assemblies = new[] { typeof(Enumerable).Assembly, typeof(Random).Assembly, typeof(System.Collections.IEnumerable).Assembly };\n    var x = await CSharpScript.RunAsync<(bool, string)>($\"{context.JourneyContext.SubmittedCode}\" + @\"\n        var _random = new Random();\n        var _param = Enumerable.Range(_random.Next(3, 6), _random.Next(5, 8))\n                            .Select(i => _random.Next(100)).ToList();\n        double _expected = _param.Average();\n        double _result = average(_param);\n        return (_expected == _result, $\"\"Test: {string.Join(\"\",\"\", _param)}. Count: {_param.Count()} Expected: {_expected}. Result: {_result}.\"\");\n    \", Microsoft.CodeAnalysis.Scripting.ScriptOptions.Default.AddImports(imports).AddReferences(assemblies));\n    return x.ReturnValue;\n}"
            },
            "code": "async Task<(bool, string)> validate(PolyglotValidationContext context) {\n    var imports = new[] { \"System.Linq\", \"System\", \"System.Collections.Generic\" };\n    var assemblies = new[] { typeof(Enumerable).Assembly, typeof(Random).Assembly, typeof(System.Collections.IEnumerable).Assembly };\n    var x = await CSharpScript.RunAsync<(bool, string)>($\"{context.JourneyContext.SubmittedCode}\" + @\"\n        var _random = new Random();\n        var _param = Enumerable.Range(_random.Next(3, 6), _random.Next(5, 8))\n                            .Select(i => _random.Next(100)).ToList();\n        double _expected = _param.Average();\n        double _result = average(_param);\n        return (_expected == _result, $\"\"Test: {string.Join(\"\",\"\", _param)}. Count: {_param.Count()} Expected: {_expected}. Result: {_result}.\"\");\n    \", Microsoft.CodeAnalysis.Scripting.ScriptOptions.Default.AddImports(imports).AddReferences(assemblies));\n    return x.ReturnValue;\n}",
            "reactFlow": {
                "id": "7fd6cfcb-26e5-4e60-a46b-c2f3c869ab13",
                "source": "533c51ff-02ce-4dbe-9fa6-2ad787d1546e",
                "target": "31b5431d-9fde-4d35-831a-8c20ef6274b8",
                "type": "customValidationEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            }
        },
        {
            "type": "unconditionalEdge",
            "title": "",
            "data": {},
            "code": "\nasync Task<(bool, string)> validate(PolyglotValidationContext context) {\n    return (true, \"Unconditional edge\");\n}",
            "reactFlow": {
                "id": "d5db28c0-f437-434e-9555-078dc2052661",
                "source": "31b5431d-9fde-4d35-831a-8c20ef6274b8",
                "target": "1be1a179-d620-4cc0-b5ae-f8f98a8a27c8",
                "type": "unconditionalEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            }
        },
        {
            "type": "customValidationEdge",
            "title": "coded the median",
            "data": {
                "code": "async Task<(bool, string)> validate(PolyglotValidationContext context) {\n    var imports = new[] { \"System.Linq\", \"System\", \"System.Collections.Generic\" };\n    var assemblies = new[] { typeof(Enumerable).Assembly, typeof(Random).Assembly, typeof(System.Collections.IEnumerable).Assembly };\n    var x = await CSharpScript.RunAsync<(bool, string)>($\"{context.JourneyContext.SubmittedCode}\" + @\"\n        var _random = new Random();\n        var _paramOdd = Enumerable.Range(4, _random.Next(0, 4) * 2 + 1)\n                                .Select(i => _random.Next(100)).ToList();\n        var _paramEven = Enumerable.Range(4, _random.Next(1, 4) * 2)\n                                .Select(i => _random.Next(100)).ToList();\n        double _median(IEnumerable<int> values)\n        {\n            var middle = values.Count() / 2.0 - 0.5;\n            var sorted = values.OrderBy(i => i);\n            return (sorted.ElementAt((int)Math.Floor(middle)) + sorted.ElementAt((int)Math.Ceiling(middle))) / 2.0;\n        }\n        double _expectedOdd = _median(_paramOdd);\n        double _expectedEven = _median(_paramEven);\n        double _resultOdd = median(_paramOdd);\n        double _resultEven = median(_paramEven);\n        var _result = _expectedOdd == _resultOdd && _expectedEven == _resultEven;\n        return (_result, $@\"\"\n            Test: {string.Join(\"\",\"\", _paramOdd)}. Count: {_paramOdd.Count()} Expected: {_expectedOdd}. Result: {_resultOdd}. {(_expectedOdd == _resultOdd ? \"\"‚úÖ\"\" : \"\"‚ùå\"\")}.\n            Test: {string.Join(\"\",\"\", _paramEven)}. Count: {_paramEven.Count()} Expected: {_expectedEven}. Result: {_resultEven}. {(_expectedEven == _resultEven ? \"\"‚úÖ\"\" : \"\"‚ùå\"\")}.\n        \"\");\n    \", Microsoft.CodeAnalysis.Scripting.ScriptOptions.Default.AddImports(imports).AddReferences(assemblies));\n    return x.ReturnValue;\n}"
            },
            "code": "async Task<(bool, string)> validate(PolyglotValidationContext context) {\n    var imports = new[] { \"System.Linq\", \"System\", \"System.Collections.Generic\" };\n    var assemblies = new[] { typeof(Enumerable).Assembly, typeof(Random).Assembly, typeof(System.Collections.IEnumerable).Assembly };\n    var x = await CSharpScript.RunAsync<(bool, string)>($\"{context.JourneyContext.SubmittedCode}\" + @\"\n        var _random = new Random();\n        var _paramOdd = Enumerable.Range(4, _random.Next(0, 4) * 2 + 1)\n                                .Select(i => _random.Next(100)).ToList();\n        var _paramEven = Enumerable.Range(4, _random.Next(1, 4) * 2)\n                                .Select(i => _random.Next(100)).ToList();\n        double _median(IEnumerable<int> values)\n        {\n            var middle = values.Count() / 2.0 - 0.5;\n            var sorted = values.OrderBy(i => i);\n            return (sorted.ElementAt((int)Math.Floor(middle)) + sorted.ElementAt((int)Math.Ceiling(middle))) / 2.0;\n        }\n        double _expectedOdd = _median(_paramOdd);\n        double _expectedEven = _median(_paramEven);\n        double _resultOdd = median(_paramOdd);\n        double _resultEven = median(_paramEven);\n        var _result = _expectedOdd == _resultOdd && _expectedEven == _resultEven;\n        return (_result, $@\"\"\n            Test: {string.Join(\"\",\"\", _paramOdd)}. Count: {_paramOdd.Count()} Expected: {_expectedOdd}. Result: {_resultOdd}. {(_expectedOdd == _resultOdd ? \"\"‚úÖ\"\" : \"\"‚ùå\"\")}.\n            Test: {string.Join(\"\",\"\", _paramEven)}. Count: {_paramEven.Count()} Expected: {_expectedEven}. Result: {_resultEven}. {(_expectedEven == _resultEven ? \"\"‚úÖ\"\" : \"\"‚ùå\"\")}.\n        \"\");\n    \", Microsoft.CodeAnalysis.Scripting.ScriptOptions.Default.AddImports(imports).AddReferences(assemblies));\n    return x.ReturnValue;\n}",
            "reactFlow": {
                "id": "b6fd9fa5-ed4f-4a92-99c4-76ecfa757b1f",
                "source": "1be1a179-d620-4cc0-b5ae-f8f98a8a27c8",
                "target": "0e3e524d-dd35-460f-b321-a50a27a176fd",
                "type": "customValidationEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            }
        },
        {
            "type": "unconditionalEdge",
            "title": "",
            "data": {},
            "code": "\nasync Task<(bool, string)> validate(PolyglotValidationContext context) {\n    return (true, \"Unconditional edge\");\n}",
            "reactFlow": {
                "id": "3ba2b1e5-e8f8-404d-ba2a-833d4fa005f3",
                "source": "7306037d-8ada-4baa-ab9b-5c699a196238",
                "target": "85556cc3-697e-40b8-ba9f-f937de6ce5c7",
                "type": "unconditionalEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            }
        },
        {
            "type": "exactValueEdge",
            "title": "answer = 53",
            "data": {
                "value": "53"
            },
            "code": "\nasync Task<(bool, string)> validate(PolyglotValidationContext context) {\n    return (String.Equals(context.Condition.Data.value, context.JourneyContext.SubmittedCode), \"Exact value edge\");\n}",
            "reactFlow": {
                "id": "439b7f89-9145-4ca1-9868-1280c83fa486",
                "source": "85556cc3-697e-40b8-ba9f-f937de6ce5c7",
                "target": "533c51ff-02ce-4dbe-9fa6-2ad787d1546e",
                "type": "exactValueEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            }
        },
        {
            "type": "customValidationEdge",
            "title": "coded the average",
            "data": {
                "code": "async Task<(bool, string)> validate(PolyglotValidationContext context) {\n    var imports = new[] { \"System.Linq\", \"System\", \"System.Collections.Generic\" };\n    var assemblies = new[] { typeof(Enumerable).Assembly, typeof(Random).Assembly, typeof(System.Collections.IEnumerable).Assembly };\n    var x = await CSharpScript.RunAsync<(bool, string)>($\"{context.JourneyContext.SubmittedCode}\" + @\"\n        var _random = new Random();\n        var _param = Enumerable.Range(_random.Next(3, 6), _random.Next(5, 8))\n                            .Select(i => _random.Next(100)).ToList();\n        double _expected = _param.Average();\n        double _result = median(_param);\n        return (_expected == _result, $\"\"Test: {string.Join(\"\",\"\", _param)}. Count: {_param.Count()} Expected: {_expected}. Result: {_result}.\"\");\n    \", Microsoft.CodeAnalysis.Scripting.ScriptOptions.Default.AddImports(imports).AddReferences(assemblies));\n    return x.ReturnValue;\n}"
            },
            "code": "async Task<(bool, string)> validate(PolyglotValidationContext context) {\n    var imports = new[] { \"System.Linq\", \"System\", \"System.Collections.Generic\" };\n    var assemblies = new[] { typeof(Enumerable).Assembly, typeof(Random).Assembly, typeof(System.Collections.IEnumerable).Assembly };\n    var x = await CSharpScript.RunAsync<(bool, string)>($\"{context.JourneyContext.SubmittedCode}\" + @\"\n        var _random = new Random();\n        var _param = Enumerable.Range(_random.Next(3, 6), _random.Next(5, 8))\n                            .Select(i => _random.Next(100)).ToList();\n        double _expected = _param.Average();\n        double _result = median(_param);\n        return (_expected == _result, $\"\"Test: {string.Join(\"\",\"\", _param)}. Count: {_param.Count()} Expected: {_expected}. Result: {_result}.\"\");\n    \", Microsoft.CodeAnalysis.Scripting.ScriptOptions.Default.AddImports(imports).AddReferences(assemblies));\n    return x.ReturnValue;\n}",
            "reactFlow": {
                "id": "a0301193-878f-4865-b69e-f1805d8dc666",
                "source": "1be1a179-d620-4cc0-b5ae-f8f98a8a27c8",
                "target": "c9473f2d-fa81-4808-84e9-e1fb9a7eba24",
                "type": "customValidationEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            }
        },
        {
            "type": "customValidationEdge",
            "title": "wrong",
            "data": {
                "code": "async Task<(bool, string)> validate(PolyglotValidationContext context) {\n    var imports = new[] { \"System.Linq\", \"System\", \"System.Collections.Generic\" };\n    var assemblies = new[] { typeof(Enumerable).Assembly, typeof(Random).Assembly, typeof(System.Collections.IEnumerable).Assembly };\n    var x = await CSharpScript.RunAsync<(bool, string)>($\"{context.JourneyContext.SubmittedCode}\" + @\"\n        var _random = new Random();\n        var _paramOdd = Enumerable.Range(4, _random.Next(0, 4) * 2 + 1)\n                                .Select(i => _random.Next(100)).ToList();\n        var _paramEven = Enumerable.Range(4, _random.Next(1, 4) * 2)\n                                .Select(i => _random.Next(100)).ToList();\n        double _median(IEnumerable<int> values)\n        {\n            var middle = values.Count() / 2.0 - 0.5;\n            var sorted = values.OrderBy(i => i);\n            return (sorted.ElementAt((int)Math.Floor(middle)) + sorted.ElementAt((int)Math.Ceiling(middle))) / 2.0;\n        }\n        double _expectedOdd = _median(_paramOdd);\n        double _expectedEven = _median(_paramEven);\n        double _resultOdd = median(_paramOdd);\n        double _resultEven = median(_paramEven);\n        var _result = !(_expectedOdd == _resultOdd && _expectedEven == _resultEven);\n        var _feedback = (_expectedOdd == _resultOdd, _expectedEven == _resultEven) switch\n        {\n            (true, true) => \"\"median calculated correctly\"\",\n            (true, false) => \"\"median incorrect for even number of values\"\",\n            (false, true) => \"\"median incorrect for odd number of values\"\",\n            (false, false) => \"\"median incorrect for both even and odd number of values\"\"\n        };\n        if (_result && (_resultOdd == _paramOdd.Average() || _resultEven == _paramEven.Average()))\n        {\n            _result = false;\n            _feedback = \"\"calculated the average instead of the median\"\";\n        }\n        return (_result, _feedback);\n    \", Microsoft.CodeAnalysis.Scripting.ScriptOptions.Default.AddImports(imports).AddReferences(assemblies));\n    return x.ReturnValue;\n}"
            },
            "code": "async Task<(bool, string)> validate(PolyglotValidationContext context) {\n    var imports = new[] { \"System.Linq\", \"System\", \"System.Collections.Generic\" };\n    var assemblies = new[] { typeof(Enumerable).Assembly, typeof(Random).Assembly, typeof(System.Collections.IEnumerable).Assembly };\n    var x = await CSharpScript.RunAsync<(bool, string)>($\"{context.JourneyContext.SubmittedCode}\" + @\"\n        var _random = new Random();\n        var _paramOdd = Enumerable.Range(4, _random.Next(0, 4) * 2 + 1)\n                                .Select(i => _random.Next(100)).ToList();\n        var _paramEven = Enumerable.Range(4, _random.Next(1, 4) * 2)\n                                .Select(i => _random.Next(100)).ToList();\n        double _median(IEnumerable<int> values)\n        {\n            var middle = values.Count() / 2.0 - 0.5;\n            var sorted = values.OrderBy(i => i);\n            return (sorted.ElementAt((int)Math.Floor(middle)) + sorted.ElementAt((int)Math.Ceiling(middle))) / 2.0;\n        }\n        double _expectedOdd = _median(_paramOdd);\n        double _expectedEven = _median(_paramEven);\n        double _resultOdd = median(_paramOdd);\n        double _resultEven = median(_paramEven);\n        var _result = !(_expectedOdd == _resultOdd && _expectedEven == _resultEven);\n        var _feedback = (_expectedOdd == _resultOdd, _expectedEven == _resultEven) switch\n        {\n            (true, true) => \"\"median calculated correctly\"\",\n            (true, false) => \"\"median incorrect for even number of values\"\",\n            (false, true) => \"\"median incorrect for odd number of values\"\",\n            (false, false) => \"\"median incorrect for both even and odd number of values\"\"\n        };\n        if (_result && (_resultOdd == _paramOdd.Average() || _resultEven == _paramEven.Average()))\n        {\n            _result = false;\n            _feedback = \"\"calculated the average instead of the median\"\";\n        }\n        return (_result, _feedback);\n    \", Microsoft.CodeAnalysis.Scripting.ScriptOptions.Default.AddImports(imports).AddReferences(assemblies));\n    return x.ReturnValue;\n}",
            "reactFlow": {
                "id": "77a60655-d7bb-4811-b999-6ab427310f85",
                "source": "1be1a179-d620-4cc0-b5ae-f8f98a8a27c8",
                "target": "f6d047d1-83bf-448b-b8df-cb5cd1811adc",
                "type": "customValidationEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            }
        },
        {
            "type": "unconditionalEdge",
            "title": "",
            "data": {},
            "code": "\nasync Task<(bool, string)> validate(PolyglotValidationContext context) {\n    return (true, \"Unconditional edge\");\n}",
            "reactFlow": {
                "id": "9aaad4c6-5d29-4002-bc0b-b3b2878909d0",
                "source": "f6d047d1-83bf-448b-b8df-cb5cd1811adc",
                "target": "9d1026d2-dd46-46f7-94c3-851f840ea008",
                "type": "unconditionalEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            }
        },
        {
            "type": "exactValueEdge",
            "title": "answer = 35",
            "data": {
                "value": "35"
            },
            "code": "\nasync Task<(bool, string)> validate(PolyglotValidationContext context) {\n    return (String.Equals(context.Condition.Data.value, context.JourneyContext.SubmittedCode), \"Exact value edge\");\n}",
            "reactFlow": {
                "id": "c4075213-3f91-4b71-8034-0e192ef9ffdb",
                "source": "9d1026d2-dd46-46f7-94c3-851f840ea008",
                "target": "1be1a179-d620-4cc0-b5ae-f8f98a8a27c8",
                "type": "exactValueEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            }
        },
        {
            "reactFlow": {
                "id": "7f6f8cb1-42a1-42da-9b8f-57b1d77e02fd",
                "source": "ddb6f2eb-5d57-44c5-8d74-f09c97935f3d",
                "target": "1be1a179-d620-4cc0-b5ae-f8f98a8a27c8",
                "type": "passFailEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            },
            "type": "passFailEdge",
            "title": "pass",
            "data": {
                "conditionKind": "pass"
            },
            "code": "\nasync Task<(bool, string)> validate(PolyglotValidationContext context) {\n    var isSubmissionCorrect = context.Exercise.Data.correctAnswers.Contains(context.JourneyContext.SubmittedCode);\n    var conditionKind = context.Condition.Data.conditionKind switch\n    {\n        \"pass\" => true,\n        \"fail\" => false,\n        _ => throw new Exception(\"Unknown condition kind\")\n    };\n    return (conditionKind == isSubmissionCorrect, \"Pass/Fail edge\");\n}"
        },
        {
            "type": "unconditionalEdge",
            "title": "",
            "data": {},
            "code": "\nasync Task<(bool, string)> validate(PolyglotValidationContext context) {\n    return (true, \"Unconditional edge\");\n}",
            "reactFlow": {
                "id": "49fae040-604c-409f-9438-375267a8bb68",
                "source": "c9473f2d-fa81-4808-84e9-e1fb9a7eba24",
                "target": "ddb6f2eb-5d57-44c5-8d74-f09c97935f3d",
                "type": "unconditionalEdge",
                "markerEnd": {
                    "type": "arrow",
                    "width": 25,
                    "height": 25
                },
                "selected": false
            }
        }
    ]
}